{
  "definitions": {
    "ACQ_FIRST_IN_ENCODE_STEP1": {
      "name": "ACQ_FIRST_IN_ENCODE_STEP1",
      "script": "if reorder_scheme == 'Slice' then\n  return is_first_encode[\"slice\"]\nelse\n  return is_first_encode[\"phase\"]\nend",
      "sources": {
        "is_first_encode": "phase_info_is_first_encode",
        "reorder_scheme": "phase_info_comb_reorder_scheme"
      },
      "type": "parameter_definition"
    },
    "ACQ_FIRST_IN_ENCODE_STEP2": {
      "name": "ACQ_FIRST_IN_ENCODE_STEP2",
      "script": "return is_first_encode[\"slice\"]",
      "sources": {
        "is_first_encode": "phase_info_is_first_encode"
      },
      "type": "parameter_definition"
    },
    "ACQ_FIRST_IN_REPETITION": {
      "name": "ACQ_FIRST_IN_REPETITION",
      "script": "if seq_dim == 2 then\n  return is_first_encode['phase'] and is_first_slice\nelseif seq_dim == 3 then\n  return is_first_encode['phase'] and is_first_encode['slice']\nend",
      "sources": {
        "is_first_encode": "phase_info_is_first_encode",
        "is_first_slice": "slice_info_is_first_slice",
        "seq_dim": "info_seq_dim"
      },
      "type": "parameter_definition"
    },
    "ACQ_FIRST_IN_SLICE": {
      "name": "ACQ_FIRST_IN_SLICE",
      "script": "if seq_dim == 2 then\n  return is_first_encode['phase']\nelse\n  return false\nend",
      "sources": {
        "is_first_encode": "phase_info_is_first_encode",
        "seq_dim": "info_seq_dim"
      },
      "type": "parameter_definition"
    },
    "ACQ_IS_PARALLEL_CALIBRATION": {
      "name": "ACQ_IS_PARALLEL_CALIBRATION",
      "script": "if PAT_mode == 'grappa_integrated' then\n  local line_cur_p, line_center\n  if reorder_scheme == 'Slice' then\n    line_cur = info_line_cur[\"slice\"]\n    line_center = info_line_center[\"slice\"]\n  else\n    line_cur = info_line_cur[\"phase\"]\n    line_center = info_line_center[\"phase\"]\n  end\n  if (PAT_factor > 1) then\n    if (line_cur >= line_center - ref_lines/2) and (line_cur < line_center+ref_lines/2) then\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nelse\n  return false\nend",
      "sources": {
        "PAT_factor": "PAT_factor_phase",
        "PAT_mode": "PAT_mode",
        "info_line_center": "phase_info_line_center",
        "info_line_cur": "phase_info_line_cur",
        "ref_lines": "PAT_ref_lines_phase",
        "reorder_scheme": "phase_info_comb_reorder_scheme"
      },
      "type": "parameter_definition"
    },
    "ACQ_IS_PARALLEL_CALIBRATION_AND_IMAGING": {
      "name": "ACQ_IS_PARALLEL_CALIBRATION_AND_IMAGING",
      "script": "if PAT_mode == 'grappa_integrated' then\n  local line_cur, line_center\n  if reorder_scheme == 'Slice' then\n    line_cur = info_line_cur[\"slice\"]\n    line_center = info_line_center[\"slice\"]\n  else\n    line_cur = info_line_cur[\"phase\"]\n    line_center = info_line_center[\"phase\"]\n  end\n  if (PAT_factor > 1) then\n    if (line_cur >= line_center - ref_lines/2) and (line_cur < line_center+ref_lines/2) and ((line_cur % PAT_factor) == (line_center % PAT_factor)) then\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nelse\n  return false\nend",
      "sources": {
        "PAT_factor": "PAT_factor_phase",
        "PAT_mode": "PAT_mode",
        "info_line_center": "phase_info_line_center",
        "info_line_cur": "phase_info_line_cur",
        "ref_lines": "PAT_ref_lines_phase",
        "reorder_scheme": "phase_info_comb_reorder_scheme"
      },
      "type": "parameter_definition"
    },
    "ACQ_LAST_IN_ENCODE_STEP1": {
      "name": "ACQ_LAST_IN_ENCODE_STEP1",
      "script": "if reorder_scheme == 'Slice' then\n  return is_last_encode[\"slice\"]\nelse\n  return is_last_encode[\"phase\"]\nend",
      "sources": {
        "is_last_encode": "phase_info_is_last_encode",
        "reorder_scheme": "phase_info_comb_reorder_scheme"
      },
      "type": "parameter_definition"
    },
    "ACQ_LAST_IN_ENCODE_STEP2": {
      "name": "ACQ_LAST_IN_ENCODE_STEP2",
      "script": "return is_last_encode[\"slice\"]",
      "sources": {
        "is_last_encode": "phase_info_is_last_encode"
      },
      "type": "parameter_definition"
    },
    "ACQ_LAST_IN_REPETITION": {
      "name": "ACQ_LAST_IN_REPETITION",
      "script": "if seq_dim == 2 then\n  return is_last_encode['phase'] and is_last_slice\nelseif seq_dim == 3 then\n  return is_last_encode['phase'] and is_last_encode['slice']\nend",
      "sources": {
        "is_last_encode": "phase_info_is_last_encode",
        "is_last_slice": "slice_info_is_last_slice",
        "seq_dim": "info_seq_dim"
      },
      "type": "parameter_definition"
    },
    "ACQ_LAST_IN_SLICE": {
      "name": "ACQ_LAST_IN_SLICE",
      "script": "if seq_dim == 2 then\n  return is_last_encode['phase']\nelse\n  return false\nend",
      "sources": {
        "is_last_encode": "phase_info_is_last_encode",
        "seq_dim": "info_seq_dim"
      },
      "type": "parameter_definition"
    },
    "center_sample": {
      "name": "center_sample",
      "script": "return center_sample",
      "sources": {
        "center_sample": "read_info_center_sample"
      },
      "type": "parameter_definition"
    },
    "flex_encoding_encodingLimits_kspace_encoding_step_1": {
      "name": "flex_encoding_encodingLimits_kspace_encoding_step_1",
      "script": "if reorder_scheme == 'Slice' then\n  return {0, acq_size[\"slice\"]-1, line_center[\"slice\"]}\nelse\n  return {0, acq_size[\"phase\"]-1, line_center[\"phase\"]}\nend",
      "sources": {
        "acq_size": "phase_info_acq_size",
        "line_center": "phase_info_line_center",
        "reorder_scheme": "phase_info_comb_reorder_scheme"
      },
      "type": "parameter_definition"
    },
    "flex_encoding_encodingLimits_kspace_encoding_step_2": {
      "name": "flex_encoding_encodingLimits_kspace_encoding_step_2",
      "script": "return {0, acq_size[\"slice\"]-1, line_center[\"slice\"]}",
      "sources": {
        "acq_size": "phase_info_acq_size",
        "line_center": "phase_info_line_center"
      },
      "type": "parameter_definition"
    },
    "idx_kspace_encode_step_1": {
      "name": "idx_kspace_encode_step_1",
      "script": "if reorder_scheme == 'Slice' then\n  return reorder[\"lines\"][1+pos][\"slice\"]\nelse\n  return reorder[\"lines\"][1+pos][\"phase\"]\nend",
      "sources": {
        "pos": "phase_info_line_pos",
        "reorder": "phase_info_comb_reorder",
        "reorder_scheme": "phase_info_comb_reorder_scheme"
      },
      "type": "parameter_definition"
    },
    "idx_kspace_encode_step_2": {
      "name": "idx_kspace_encode_step_2",
      "script": "return reorder[\"lines\"][1+pos][\"slice\"]",
      "sources": {
        "pos": "phase_info_line_pos",
        "reorder": "phase_info_comb_reorder"
      },
      "type": "parameter_definition"
    },
    "idx_slice": {
      "name": "idx_slice",
      "script": "return cur",
      "sources": {
        "cur": "slice_info_line_cur"
      },
      "type": "parameter_definition"
    },
    "phase_dir": {
      "name": "phase_dir",
      "script": "length = math.sqrt(orientation[2][1]*orientation[2][1]+orientation[2][2]*orientation[2][2]+orientation[2][3]*orientation[2][3])\nreturn {orientation[2][1]/length, orientation[2][2]/length, orientation[2][3]/length}",
      "sources": {
        "orientation": "orientation"
      },
      "type": "parameter_definition"
    },
    "phase_info": {
      "blueprint_id": "12d7fb94-fecf-48e7-96e4-448b84fe5c2e",
      "name": "phase_info",
      "type": "extending_definition"
    },
    "position": {
      "name": "position",
      "script": "return offcenter",
      "sources": {
        "offcenter": "offcenter"
      },
      "type": "parameter_definition"
    },
    "read_dir": {
      "name": "read_dir",
      "script": "length = math.sqrt(orientation[1][1]*orientation[1][1]+orientation[1][2]*orientation[1][2]+orientation[1][3]*orientation[1][3])\nreturn {orientation[1][1]/length, orientation[1][2]/length, orientation[1][3]/length}",
      "sources": {
        "orientation": "orientation"
      },
      "type": "parameter_definition"
    },
    "read_info": {
      "blueprint_id": "c3c23c8b-97b1-43b7-a392-c2bc8b57bc14",
      "name": "read_info",
      "type": "extending_definition"
    },
    "slice_dir": {
      "name": "slice_dir",
      "script": "length = math.sqrt(orientation[3][1]*orientation[3][1]+orientation[3][2]*orientation[3][2]+orientation[3][3]*orientation[3][3])\nreturn {orientation[3][1]/length, orientation[3][2]/length, orientation[3][3]/length}",
      "sources": {
        "orientation": "orientation"
      },
      "type": "parameter_definition"
    },
    "slice_info": {
      "blueprint_id": "6f0a2d68-7f97-43c9-ac7f-dc3fb673ad73",
      "name": "slice_info",
      "type": "extending_definition"
    }
  },
  "id": "ADC header",
  "name": "ADC header",
  "properties": {
    "tags": [
      "basic"
    ]
  }
}